
package com.amazonaws.fps.model;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="BatchSize" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="Transaction" type="{http://fps.amazonaws.com/doc/2008-09-17/}Transaction" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="StartTimeForNextTransaction" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * Generated by AWS Code Generator
 * <p/>
 * Tue Sep 29 03:25:23 PDT 2009
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "batchSize",
    "transaction",
    "startTimeForNextTransaction"
})
@XmlRootElement(name = "GetAccountActivityResult")
public class GetAccountActivityResult {

    @XmlElement(name = "BatchSize")
    protected Integer batchSize;
    @XmlElement(name = "Transaction")
    protected List<Transaction> transaction;
    @XmlElement(name = "StartTimeForNextTransaction")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar startTimeForNextTransaction;

    /**
     * Default constructor
     * 
     */
    public GetAccountActivityResult() {
        super();
    }

    /**
     * Value constructor
     * 
     */
    public GetAccountActivityResult(final Integer batchSize, final List<Transaction> transaction, final XMLGregorianCalendar startTimeForNextTransaction) {
        this.batchSize = batchSize;
        this.transaction = transaction;
        this.startTimeForNextTransaction = startTimeForNextTransaction;
    }

    /**
     * Gets the value of the batchSize property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getBatchSize() {
        return batchSize;
    }

    /**
     * Sets the value of the batchSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setBatchSize(Integer value) {
        this.batchSize = value;
    }

    public boolean isSetBatchSize() {
        return (this.batchSize!= null);
    }

    /**
     * Gets the value of the transaction property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the transaction property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTransaction().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Transaction }
     * 
     * 
     */
    public List<Transaction> getTransaction() {
        if (transaction == null) {
            transaction = new ArrayList<Transaction>();
        }
        return this.transaction;
    }

    public boolean isSetTransaction() {
        return ((this.transaction!= null)&&(!this.transaction.isEmpty()));
    }

    public void unsetTransaction() {
        this.transaction = null;
    }

    /**
     * Gets the value of the startTimeForNextTransaction property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getStartTimeForNextTransaction() {
        return startTimeForNextTransaction;
    }

    /**
     * Sets the value of the startTimeForNextTransaction property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setStartTimeForNextTransaction(XMLGregorianCalendar value) {
        this.startTimeForNextTransaction = value;
    }

    public boolean isSetStartTimeForNextTransaction() {
        return (this.startTimeForNextTransaction!= null);
    }

    /**
     * Sets the value of the BatchSize property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public GetAccountActivityResult withBatchSize(Integer value) {
        setBatchSize(value);
        return this;
    }

    /**
     * Sets the value of the Transaction property.
     * 
     * @param values
     * @return
     *     this instance
     */
    public GetAccountActivityResult withTransaction(Transaction... values) {
        for (Transaction value: values) {
            getTransaction().add(value);
        }
        return this;
    }

    /**
     * Sets the value of the StartTimeForNextTransaction property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public GetAccountActivityResult withStartTimeForNextTransaction(XMLGregorianCalendar value) {
        setStartTimeForNextTransaction(value);
        return this;
    }

    /**
     * Sets the value of the transaction property.
     * 
     * @param transaction
     *     allowed object is
     *     {@link Transaction }
     *     
     */
    public void setTransaction(List<Transaction> transaction) {
        this.transaction = transaction;
    }
    

    /**
     * 
     * XML fragment representation of this object
     * 
     * @return XML fragment for this object. Name for outer
     * tag expected to be set by calling method. This fragment
     * returns inner properties representation only
     */
    protected String toXMLFragment() {
        StringBuffer xml = new StringBuffer();
        if (isSetBatchSize()) {
            xml.append("<BatchSize>");
            xml.append(getBatchSize() + "");
            xml.append("</BatchSize>");
        }
        java.util.List<Transaction> transactionList = getTransaction();
        for (Transaction transaction : transactionList) {
            xml.append("<Transaction>");
            xml.append(transaction.toXMLFragment());
            xml.append("</Transaction>");
        }
        if (isSetStartTimeForNextTransaction()) {
            xml.append("<StartTimeForNextTransaction>");
            xml.append(getStartTimeForNextTransaction() + "");
            xml.append("</StartTimeForNextTransaction>");
        }
        return xml.toString();
    }

    /**
     * 
     * Escape XML special characters
     */
    private String escapeXML(String string) {
        StringBuffer sb = new StringBuffer();
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '&':
                sb.append("&amp;");
                break;
            case '<':
                sb.append("&lt;");
                break;
            case '>':
                sb.append("&gt;");
                break;
            case '\'':
                sb.append("&#039;");
                break;
            case '"':
                sb.append("&quot;");
                break;
            default:
                sb.append(c);
            }
        }
        return sb.toString();
    }



    /**
     *
     * JSON fragment representation of this object
     *
     * @return JSON fragment for this object. Name for outer
     * object expected to be set by calling method. This fragment
     * returns inner properties representation only
     *
     */
    protected String toJSONFragment() {
        StringBuffer json = new StringBuffer();
        boolean first = true;
        if (isSetBatchSize()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("BatchSize"));
            json.append(" : ");
            json.append(quoteJSON(getBatchSize() + ""));
            first = false;
        }
        if (isSetTransaction()) {
            if (!first) json.append(", ");
            json.append("\"Transaction\" : [");
            java.util.List<Transaction> transactionList = getTransaction();
            int transactionListIndex = 0;
            for (Transaction transaction : transactionList) {
                if (transactionListIndex > 0) json.append(", ");
                json.append("{");
                json.append("");
                json.append(transaction.toJSONFragment());
                json.append("}");
                first = false;
                ++transactionListIndex;
            }
            json.append("]");
        }
        if (isSetStartTimeForNextTransaction()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("StartTimeForNextTransaction"));
            json.append(" : ");
            json.append(quoteJSON(getStartTimeForNextTransaction() + ""));
            first = false;
        }
        return json.toString();
    }

    /**
     *
     * Quote JSON string
     */
    private String quoteJSON(String string) {
        StringBuffer sb = new StringBuffer();
        sb.append("\"");
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '"':
                sb.append("\\\"");
                break;
            case '\\':
                sb.append("\\\\");
                break;
            case '/':
                sb.append("\\/");
                break;
            case '\b':
                sb.append("\\b");
                break;
            case '\f':
                sb.append("\\f");
                break;
            case '\n':
                sb.append("\\n");
                break;
            case '\r':
                sb.append("\\r");
                break;
            case '\t':
                sb.append("\\t");
                break;
            default:
                if (c <  ' ') {
                    sb.append("\\u" + String.format("%03x", Integer.valueOf(c)));
                } else {
                sb.append(c);
            }
        }
        }
        sb.append("\"");
        return sb.toString();
    }


}
