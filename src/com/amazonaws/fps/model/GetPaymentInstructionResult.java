
package com.amazonaws.fps.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Token" type="{http://fps.amazonaws.com/doc/2008-09-17/}Token"/>
 *         &lt;element name="PaymentInstruction" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="CallerReference" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="TokenFriendlyName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * Generated by AWS Code Generator
 * <p/>
 * Tue Sep 29 03:25:23 PDT 2009
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "token",
    "paymentInstruction",
    "callerReference",
    "tokenFriendlyName"
})
@XmlRootElement(name = "GetPaymentInstructionResult")
public class GetPaymentInstructionResult {

    @XmlElement(name = "Token", required = true)
    protected Token token;
    @XmlElement(name = "PaymentInstruction", required = true)
    protected String paymentInstruction;
    @XmlElement(name = "CallerReference", required = true)
    protected String callerReference;
    @XmlElement(name = "TokenFriendlyName")
    protected String tokenFriendlyName;

    /**
     * Default constructor
     * 
     */
    public GetPaymentInstructionResult() {
        super();
    }

    /**
     * Value constructor
     * 
     */
    public GetPaymentInstructionResult(final Token token, final String paymentInstruction, final String callerReference, final String tokenFriendlyName) {
        this.token = token;
        this.paymentInstruction = paymentInstruction;
        this.callerReference = callerReference;
        this.tokenFriendlyName = tokenFriendlyName;
    }

    /**
     * Gets the value of the token property.
     * 
     * @return
     *     possible object is
     *     {@link Token }
     *     
     */
    public Token getToken() {
        return token;
    }

    /**
     * Sets the value of the token property.
     * 
     * @param value
     *     allowed object is
     *     {@link Token }
     *     
     */
    public void setToken(Token value) {
        this.token = value;
    }

    public boolean isSetToken() {
        return (this.token!= null);
    }

    /**
     * Gets the value of the paymentInstruction property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPaymentInstruction() {
        return paymentInstruction;
    }

    /**
     * Sets the value of the paymentInstruction property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPaymentInstruction(String value) {
        this.paymentInstruction = value;
    }

    public boolean isSetPaymentInstruction() {
        return (this.paymentInstruction!= null);
    }

    /**
     * Gets the value of the callerReference property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCallerReference() {
        return callerReference;
    }

    /**
     * Sets the value of the callerReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCallerReference(String value) {
        this.callerReference = value;
    }

    public boolean isSetCallerReference() {
        return (this.callerReference!= null);
    }

    /**
     * Gets the value of the tokenFriendlyName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTokenFriendlyName() {
        return tokenFriendlyName;
    }

    /**
     * Sets the value of the tokenFriendlyName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTokenFriendlyName(String value) {
        this.tokenFriendlyName = value;
    }

    public boolean isSetTokenFriendlyName() {
        return (this.tokenFriendlyName!= null);
    }

    /**
     * Sets the value of the Token property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public GetPaymentInstructionResult withToken(Token value) {
        setToken(value);
        return this;
    }

    /**
     * Sets the value of the PaymentInstruction property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public GetPaymentInstructionResult withPaymentInstruction(String value) {
        setPaymentInstruction(value);
        return this;
    }

    /**
     * Sets the value of the CallerReference property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public GetPaymentInstructionResult withCallerReference(String value) {
        setCallerReference(value);
        return this;
    }

    /**
     * Sets the value of the TokenFriendlyName property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public GetPaymentInstructionResult withTokenFriendlyName(String value) {
        setTokenFriendlyName(value);
        return this;
    }
    

    /**
     * 
     * XML fragment representation of this object
     * 
     * @return XML fragment for this object. Name for outer
     * tag expected to be set by calling method. This fragment
     * returns inner properties representation only
     */
    protected String toXMLFragment() {
        StringBuffer xml = new StringBuffer();
        if (isSetToken()) {
            Token  token = getToken();
            xml.append("<Token>");
            xml.append(token.toXMLFragment());
            xml.append("</Token>");
        } 
        if (isSetPaymentInstruction()) {
            xml.append("<PaymentInstruction>");
            xml.append(escapeXML(getPaymentInstruction()));
            xml.append("</PaymentInstruction>");
        }
        if (isSetCallerReference()) {
            xml.append("<CallerReference>");
            xml.append(escapeXML(getCallerReference()));
            xml.append("</CallerReference>");
        }
        if (isSetTokenFriendlyName()) {
            xml.append("<TokenFriendlyName>");
            xml.append(escapeXML(getTokenFriendlyName()));
            xml.append("</TokenFriendlyName>");
        }
        return xml.toString();
    }

    /**
     * 
     * Escape XML special characters
     */
    private String escapeXML(String string) {
        StringBuffer sb = new StringBuffer();
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '&':
                sb.append("&amp;");
                break;
            case '<':
                sb.append("&lt;");
                break;
            case '>':
                sb.append("&gt;");
                break;
            case '\'':
                sb.append("&#039;");
                break;
            case '"':
                sb.append("&quot;");
                break;
            default:
                sb.append(c);
            }
        }
        return sb.toString();
    }



    /**
     *
     * JSON fragment representation of this object
     *
     * @return JSON fragment for this object. Name for outer
     * object expected to be set by calling method. This fragment
     * returns inner properties representation only
     *
     */
    protected String toJSONFragment() {
        StringBuffer json = new StringBuffer();
        boolean first = true;
        if (isSetToken()) {
            if (!first) json.append(", ");
            json.append("\"Token\" : {");
            Token  token = getToken();


            json.append(token.toJSONFragment());
            json.append("}");
            first = false;
        }
        if (isSetPaymentInstruction()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("PaymentInstruction"));
            json.append(" : ");
            json.append(quoteJSON(getPaymentInstruction()));
            first = false;
        }
        if (isSetCallerReference()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("CallerReference"));
            json.append(" : ");
            json.append(quoteJSON(getCallerReference()));
            first = false;
        }
        if (isSetTokenFriendlyName()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("TokenFriendlyName"));
            json.append(" : ");
            json.append(quoteJSON(getTokenFriendlyName()));
            first = false;
        }
        return json.toString();
    }

    /**
     *
     * Quote JSON string
     */
    private String quoteJSON(String string) {
        StringBuffer sb = new StringBuffer();
        sb.append("\"");
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '"':
                sb.append("\\\"");
                break;
            case '\\':
                sb.append("\\\\");
                break;
            case '/':
                sb.append("\\/");
                break;
            case '\b':
                sb.append("\\b");
                break;
            case '\f':
                sb.append("\\f");
                break;
            case '\n':
                sb.append("\\n");
                break;
            case '\r':
                sb.append("\\r");
                break;
            case '\t':
                sb.append("\\t");
                break;
            default:
                if (c <  ' ') {
                    sb.append("\\u" + String.format("%03x", Integer.valueOf(c)));
                } else {
                sb.append(c);
            }
        }
        }
        sb.append("\"");
        return sb.toString();
    }


}
